题目描述:用一个数组表示股票每天的价格，数组的第i个数表示股票在第i天的价格。 如果只允许进行一次交易，也就是说只允许买一支股票并卖掉，求最大的收益。
// 方法一 动态规划。从前向后遍历数组，记录当前出现过的最低价格，作为买入价格，并计算以当天价格出售的收益，作为可能的最大收益，整个遍历过程中，出现过的最大收益就是所求
var maxProfit = function(prices){
    if(prices.length < 2) {
        return 0;
    }
    var curMin = prices[0],
        max = 0;
    for(var i = 0;i < prices.length;i++) {
        curMin = Math.min(curMin,prices[i]);
        max = Math.max(max,prices[i] - curMin);
    }
    return max;
};

console.log(maxProfit([7,1,5,3,6,4]));

/*
// 方法二 遍历数组，前一个数再减去后一个数得到差值放一个数组里，再降序排序取出最大值(太复杂不推荐，不过熟悉排序算法还是挺好的)
// 快速排序 以最左边间的索引值为基准点排序
var quickSort = function(a){
    var len = a.length;
    if(len<1){
        return a;
    }
    function sort(low,height){
        var temp = a[low];
        var i=low,j=height;
        if(i>j){
            return false;
        }
        while(i!=j){
            while(i < j && a[j] < temp){
                j--;
            }
            if(i < j) {
                a[i] = a[j];
                i++;
            }
            while(i<j && a[i] > temp){
                i++;
            }
            if(i<j){
               a[j] = a[i];
               j--;
            }
        }
        a[i] = temp; // temp在数组中的最终位置
        sort(low,i-1); // 递归对temp左边的进行排序
        sort(i+1,height); // 递归对temp右边的进行排序
    }
    sort(0,len-1); // 排序函数执行
    return a;
}


var maxProfit = function(prices) {
    if(prices.length === 1) {
        return 0;
    }else {
        var arr = [];
        var sum;
        for(var i =1;i<prices.length;i++) {
            sum = prices[i] - prices[i-1];
            if(sum > 0) {
                for(var j=i-1;j>=0;j--) {
                    sum = prices[i] -prices[j]
                    arr.push(sum);
                }                
            }else {
                continue;
            }
        }
        if(arr.length === 0) {
            return 0;
        }
        quickSort(arr);
        return arr[0];
    }
};

console.log(maxProfit([7,1,5,3,6,4]));
*/