题目:给定一个从0开始连续的数组，求出里面缺失的数 例:[0,1,2,3,5],缺失数:4
var missingNumber = function(nums) {
    var res = nums.length;
    
    for(var i = nums[0]; i < nums.length; i++){
        // 基于一个基本原理 A^B^B=A。这边数组是有序的，索引值和数组的每一位值是相等的,这样异或始终为1，再与res异或得到还是res，值没变。当索引值和数值不相等时，此时res=5,i=3,nums[i]=4,3^4转换为二进制 -->(011)^(100)=(111),得到的值再与5异或 (111)^(101)=(010)，转化成十进制为2。然后当i=4时，再重复一遍之前操作,可以得到res=3。
        // 但是这种算法也有一个缺点,数组的初始值只能是0且只能有一个数缺失，若有两个数缺失也会失效
        res = res^(i ^ nums[i]); // ^是异或 ，||是或。位运算 异或：相异为1，相同为0。或：有1结果则为1，全0为0。这句话也可以写成 res ^= i ^ nums[i]
        console.log(res);
    }
    
    return res;
};
console.log(missingNumber([0,1,2,3,5]));